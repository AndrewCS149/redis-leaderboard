@page "/"

@inject Interfaces.ILeaderboardEntryService _cache

<PageTitle>Leader Board</PageTitle>

@if (leaderboardEntries is not null)
{
    <table class="table table-striped">
        <thead>
            LEADERBOARD
        </thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">UserName</th>
            <th scope="col">Score</th>
        </tr>
        <tbody>
            @{
                int i = currentPg * 10 - 10 + 1;
                foreach (var entry in leaderboardEntries)
                {
                    <tr>
                        <th scope="row">@i</th>
                        <td>@entry.username</td>
                        <td>@entry.score</td>
                        <td @onclick="() => DeleteEntry(entry.username)"><TrashIcon /></td>
                    </tr>
                    i++;
                }
            }
        </tbody>
    </table>

    <!-- Paginate -->
    <div>
        <button @onclick="@(e => SwitchPage("prev"))"><PageLeftIcon /></button>
        <span>@currentPg</span>
        <button @onclick="@(e => SwitchPage("next"))"><PageRightIcon /></button>
    </div>
}

<EditForm Model=@newEntry OnValidSubmit=AddEntry>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value=newEntry.username placeholder="username" />
    <InputNumber @bind-Value=newEntry.score placeholder="score" />
    <button type="submit">Add Entry</button>
</EditForm>

@code {
    private List<LeaderboardEntryModel> leaderboardEntries;
    private LeaderboardEntryModel newEntry = new LeaderboardEntryModel();
    int currentPg = 1;
    int pgCount = 10;
    int maxPg;

    protected override async Task OnInitializedAsync()
    {
        leaderboardEntries = await _cache.GetLeaderboardEntries(leaderboardEntries, currentPg);
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)pgCount);
    }

    private async Task SwitchPage(string direction)
    {
        if (direction == "next" && currentPg < maxPg)
            currentPg++;
        else if (direction == "prev" && currentPg > 1)
            currentPg--;
        else
            return;

        leaderboardEntries = await _cache.GetLeaderboardEntries(leaderboardEntries, currentPg);
    }

    private async Task AddEntry()
    {
        await _cache.AddLeaderboardEntry(newEntry);
        leaderboardEntries = await _cache.GetLeaderboardEntries(leaderboardEntries, currentPg);
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)pgCount);
    }

    private async Task DeleteEntry(string username)
    {
        await _cache.DeleteEntry(username);
        leaderboardEntries = await _cache.GetLeaderboardEntries(leaderboardEntries, currentPg);
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)pgCount);
    }
}

