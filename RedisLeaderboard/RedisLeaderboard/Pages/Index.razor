@page "/"

@inject Interfaces.ILeaderboardEntryService _cache

<PageTitle>Leader Board</PageTitle>

@if (leaderboardEntries is not null)
{
    <!-- EMPTY LEADERBOARD -->
    @if (leaderboardEntries.Count == 0)
    {
        <h1 emptyLeaderboard>No entries</h1>
    }
    else
    {
        <!-- PAGINATE -->
        <div paginate>
            <button @onclick="@(e => SwitchPage("prev"))"><PageLeftIcon /></button>
            <span>@currentPg</span>
            <button @onclick="@(e => SwitchPage("next"))"><PageRightIcon /></button>
        </div>

        <!-- LEADERBOARD -->
        <table class="table table-striped">
            <thead>
                LEADERBOARD
            </thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">UserName</th>
                <th scope="col">Score</th>
            </tr>
            <tbody>
                @{
                    int i = currentPg * perPage - perPage + 1;
                    foreach (var entry in leaderboardEntries)
                    {
                        <tr>
                            <th scope="row">@i</th>
                            <td>@entry.username</td>
                            <td>@entry.score</td>

                            <!-- DELETE ENTRY -->
                <td delete>
                                <span @onclick="() => DeleteEntry(entry.username)"><TrashIcon /></span>
                            </td>
                        </tr>
                        i++;
                    }
                }
            </tbody>
        </table>
    }
}

<!-- ADD ENTRY -->
<div newEntry>
    <EditForm Model=@newEntry OnValidSubmit=AddEntry>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value=newEntry.username placeholder="username" />
        <InputNumber @bind-Value=newEntry.score placeholder="score" />
        <button type="submit">Add Entry</button>
    </EditForm>
</div>

<!-- RESET DATA -->
<button resetData @onclick=RestoreDefaultData type="submit">Reset Data</button>

<style>
    div[newEntry] input {
        border: 1px solid black;
        border-radius: 5px;
        display: block;
        margin: 5px 0px;
        padding: 3.5px;
    }
</style>

@code {
    private List<LeaderboardEntryModel> leaderboardEntries;
    private LeaderboardEntryModel newEntry = new LeaderboardEntryModel();
    int currentPg = 1;
    int perPage = 10;
    int maxPg;

    protected override async Task OnInitializedAsync()
    {
        leaderboardEntries = await _cache.GetEntriesForPage(currentPg, perPage);

        //set the max possible page number
        //ex: if entries per page is 10 and there are 26 entries, there is 3 pages
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)perPage);
    }

    private async Task RestoreDefaultData()
    {
        leaderboardEntries = await _cache.RestoreDefaultData();
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)perPage);
    }

    private async Task SwitchPage(string direction)
    {
        if (direction == "next" && currentPg < maxPg)
            currentPg++;
        else if (direction == "prev" && currentPg > 1)
            currentPg--;
        else
            return;

        // get new page data
        leaderboardEntries = await _cache.GetEntriesForPage(currentPg, perPage);
    }

    private async Task AddEntry()
    {
        await _cache.AddEntry(newEntry);
        leaderboardEntries = await _cache.GetEntriesForPage(currentPg, perPage);
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)perPage);
    }

    private async Task DeleteEntry(string username)
    {
        await _cache.DeleteEntry(username);

        // if last entry from page is deleted, load previous page
        if (leaderboardEntries.Count == 1)
            SwitchPage("prev");

        leaderboardEntries = await _cache.GetEntriesForPage(currentPg, perPage);
        maxPg = (int)Math.Ceiling((double)_cache.GetTotalCount() / (double)perPage);
    }
}

